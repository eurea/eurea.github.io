{"version":3,"sources":["assets/info-filled.svg","helpers/constants.ts","helpers/localization.ts","components/ExperienceCalculator.tsx","store/actions.ts","components/Settings.tsx","components/SparkCalculator.tsx","App.tsx","helpers/index.ts","serviceWorker.ts","index.tsx","store/reducers.ts"],"names":["Japanese","ExperienceTypes","ExperienceTables","english","LocalizedStrings","en","japanese","SparkCalc","ExpRpCalc","crystals","singleTickets","grandTickets","totalRolls","percentage","levelFrom","levelTo","toNextLevel","bonusExp","bonusExpInfo","weaponSummon","character","rank","sameType","totalExperience","archangelItems","rpPercentage","vessels","error","cantDowngrade","suggestionsWelcomed","jp","ExperienceCalculator","useState","setLevelFrom","setLevelTo","setToNextLevel","setBonusExp","expType","setExpType","setSameType","totalExperienceValue","setTotalExperienceValue","archangelItemsValue","setArchangelItemsValue","vesselsValue","setVesselsValue","showError","setShowError","length","maxLevel","setMaxLevel","experienceTable","setExperienceTable","useEffect","archangelExp","currentExperience","getRequiredItemsCount","itemExperience","Math","ceil","floor","toString","toFixed","handleExperienceTypeChange","e","target","value","Row","Col","xs","md","lg","className","htmlFor","strings","min","max","type","id","name","onChange","parseInt","step","hidden","OverlayTrigger","overlay","Tooltip","src","infoIcon","alt","width","checked","disabled","Alert","variant","show","SET_SPARK_DATA","SET_LANGUAGE","Settings","dispatch","useDispatch","languageCode","useSelector","state","newLanguage","payload","ReactGA","event","category","action","label","SparkCalculator","totalRollsValue","setTotalRollsValue","percentageValue","setPercentageValue","handleFieldClick","currentTarget","select","handleChange","onClick","App","Tabs","defaultActiveKey","Tab","eventKey","title","href","bannerColor","rel","getDefaultState","newState","localStorage","getItem","clear","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","preloadedState","params","search","includes","queryString","parse","parseQueryParams","JSON","store","createStore","setLanguage","setItem","stringify","getState","subscribe","app","ReactDOM","render","document","getElementById","initialize","pageview","pathname","URL","origin","addEventListener","process","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.817df3df.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/info-filled.68c85632.svg\";","export const English = 'en';\nexport const Japanese = 'jp';\nexport const ExperienceTypes = {\n  Weapon: 'weapon',\n  Character: 'character',\n  Rank: 'rank',\n};\nexport const ExperienceTables = {\n  [ExperienceTypes.Weapon]: [\n    0, 0, 10, 22, 36, 52, 70, 90, 112, 136, 162, 190, 220, 255, 295, 340, 390, 450, 520, 600, 690, 790, 910, 1050, 1210,\n    1390, 1590, 1810, 2050, 2310, 2590, 2890, 3210, 3550, 3910, 4290, 4690, 5110, 5550, 6010, 6490, 6990, 7510, 8050,\n    8610, 9190, 9790, 10410, 11050, 11710, 12390, 13090, 13810, 14550, 15310, 16090, 16890, 17710, 18550, 19410, 20290,\n    21190, 22110, 23050, 24010, 24990, 25990, 27010, 28050, 29110, 30190, 31290, 32410, 33550, 34710, 35890, 37090,\n    38310, 39550, 40810, 42090, 43990, 44710, 46050, 47410, 48790, 50190, 51610, 53050, 54510, 55990, 57490, 59010,\n    60550, 62110, 63690, 65290, 66910, 68550, 70210, 71890, 77090, 82490, 88090, 93890, 99890, 106090, 112490, 119090,\n    125890, 132890, 140090, 147490, 155090, 162890, 170890, 179090, 187490, 196090, 204890, 213890, 223190, 232790,\n    242690, 252890, 263490, 274490, 285990, 297990, 310490, 323590, 337290, 351590, 366490, 382090, 398390, 415390,\n    433090, 451590, 470890, 490990, 511990, 533990, 556990, 580990, 605990, 631990, 658990, 686990, 715990, 745990,\n    775990, 805990, 835990, 865990, 895990, 925990, 955990, 985990, 1015990, 1045990, 1075990, 1105990, 1135990,\n    1165990, 1195990, 1225990, 1255990, 1285990, 1315990, 1345990, 1375990, 1405990, 1435990, 1465990, 1495990, 1525990,\n    1555990, 1585990, 1615990, 1645990, 1675990, 1705990, 1735990, 1765990, 1795990, 1825990, 1855990, 1885990, 1915990,\n    1945990, 1975990, 2005990, 2035990, 2065990, 2095990, 2125990, 2155990, 2185990, 2215990, 2245990,\n  ],\n  [ExperienceTypes.Character]: [\n    0, 0, 30, 100, 200, 320, 460, 620, 800, 1000, 1220, 1460, 1720, 2000, 2300, 2650, 3050, 3500, 4000, 4550, 5150,\n    5800, 6500, 7300, 8200, 9200, 10300, 11500, 12800, 14200, 15700, 17300, 19000, 20800, 22700, 24700, 26800, 29000,\n    31400, 34000, 36800, 39800, 43000, 46400, 50000, 53800, 57800, 62000, 66400, 71000, 75800, 80800, 86050, 91550,\n    97300, 103300, 109550, 116050, 122800, 129800, 137050, 144550, 152350, 160450, 168850, 177550, 186550, 196050,\n    206050, 216550, 227550, 239050, 251050, 263550, 276550, 290050, 304050, 318550, 333550, 349050, 365050, 415050,\n    435050, 456050, 478050, 501050, 525050, 550050, 576050, 603050, 703050, 853050, 1053050, 1303050, 1603050, 1953050,\n    2353050, 2803050, 3303050, 3803050, 4803050, 5803050, 7003050, 8203050, 9403050, 10603050, 11803050, 13053050,\n    14303050, 15553050, 16803050, 18053050, 19353050, 20653050, 21953050, 23253050, 24553050, 25903050, 27253050,\n    28603050, 29953050, 31303050, 32703050, 34103050, 35503050, 36903050, 38303050, 39753050, 41203050, 42653050,\n    44103050, 45553050, 47053050, 48553050, 50053050, 51553050, 53053050, 54603050, 56153050, 57703050, 59253050,\n    60803050, 62403050, 64003050, 65603050, 67203050, 68803050, 70453050, 72103050, 73753050, 75403050,\n  ],\n  [ExperienceTypes.Rank]: [\n    0, 0, 50, 200, 500, 900, 1500, 2200, 2900, 3800, 4900, 6500, 8000, 9600, 11500, 13500, 15600, 17800, 20100, 22950,\n    26500, 30450, 34450, 38900, 43850, 49350, 55450, 62200, 69650, 77850, 86850, 96700, 107450, 119150, 131850, 145600,\n    160450, 176450, 193650, 212100, 231850, 252950, 275450, 299400, 324850, 351850, 380450, 410700, 442650, 476350,\n    511850, 549200, 588450, 629650, 672850, 718100, 765450, 814950, 866650, 920600, 976850, 1035450, 1096450, 1159900,\n    1225850, 1294350, 1365450, 1439200, 1515650, 1594850, 1676850, 1761700, 1849450, 1940150, 2033850, 2130600, 2230450,\n    2333450, 2439650, 2549100, 2661850, 2777950, 2897450, 3020400, 3146850, 3276850, 3410450, 3547700, 3688650, 3833350,\n    3981850, 4134200, 4290450, 4450650, 4614850, 4783100, 4955450, 5131950, 5312650, 5497600, 5686850, 5936850, 6197000,\n    6467400, 6748300, 7039900, 7342400, 7656000, 7980900, 8317300, 8665400, 9025400, 9397500, 9781900, 10178800,\n    10588400, 11010900, 11446500, 11895400, 12357800, 12833900, 13323900, 13828000, 14346400, 14879300, 15426900,\n    15989400, 16567000, 17159900, 17768300, 18392400, 19032400, 19688600, 20361300, 21050800, 21757400, 22481400,\n    23223100, 23982800, 24760800, 25557400, 26372900, 27207600, 28061800, 28935800, 29829800, 30744200, 31679400,\n    32635800, 33613800, 34613800, 35636300, 36682800, 37754800, 38853800, 39981800, 41141800, 42336800, 43571800,\n    44851800, 46181800, 47571800, 49031800, 50571800, 52201800, 53931800, 55781800, 57771800, 59921800, 62251800,\n    64781800, 67531800, 70541800, 73821800, 77371800, 81276800, 85197800, 89136300, 93092800, 97069300, 101067800,\n    105091300, 109142800, 113227300, 117349800, 121515300, 125733800, 130015300, 134369800, 138807300, 143337800,\n    147981300, 152757800, 157687300, 162789800, 168085300, 173598800, 179355300, 185379800, 191697300, 198332800,\n    204968300, 211603800, 218239300, 224874800, 231510300, 238145800, 244781300, 251416800, 258052300, 264687800,\n    271323300, 277958800, 284594300, 291229800, 297865300, 304500800, 311136300, 317771800, 324407300, 331042800,\n    337678300, 344313800, 350949300, 357584800, 364220300, 370855800, 377516440, 384202310, 390913500, 397650100,\n    404412200, 411199890, 418013260, 424852400, 431717400, 438608350, 445525340, 452468460, 459437800, 466433450,\n    473455500, 480504040, 487579160, 494680950, 501809500, 508964900, 516147240, 523356610, 530593100, 537856800,\n    545147800, 552438800, 559729800, 567020800, 574311800, 581602800, 588893800, 596184800, 603475800, 610766800,\n    618057800, 625348800, 632639800, 639930800, 647221800, 654512800, 661803800, 669094800, 676385800, 683676800,\n    690967800, 698258800, 705549800, 712840800, 720131800, 727422800, 734727930, 742047280, 749380940, 756729000,\n    764091550, 771468680, 778860480, 786267040, 793688450, 801124800, 808576180, 816042680, 823524390, 831021400,\n    838533800, 846061680, 853605130, 861164240, 868739100, 876329800, 883936430, 891559080, 899197840, 906852800,\n  ],\n};\n","import LocalizedStrings from 'react-localization';\n\nconst english = 'English';\nconst japanese = '日本語';\n\nexport default new LocalizedStrings({\n  en: {\n    english,\n    japanese,\n    SparkCalc: 'Spark Calc',\n    ExpRpCalc: 'RP&EXP Calc',\n    crystals: 'Crystals:',\n    singleTickets: 'Single tickets:',\n    grandTickets: '10x tickets:',\n    totalRolls: 'Total rolls:',\n    percentage: 'Percentage:',\n    levelFrom: 'From:',\n    levelTo: 'To:',\n    toNextLevel: 'To next level:',\n    bonusExp: 'Bonus Exp (%):',\n    bonusExpInfo: 'Usually comes from Wonders and Elemental Skills.',\n    weaponSummon: 'Weapon / Summon',\n    character: 'Character',\n    rank: 'Rank',\n    sameType: 'Same type',\n    totalExperience: 'Total Experience:',\n    archangelItems: 'Archangel Items:',\n    rpPercentage: 'Total RP, %:',\n    vessels: 'Vessels:',\n    error: 'Error',\n    cantDowngrade: 'You cannot downgrade weapons/summons/characters.',\n    suggestionsWelcomed: 'If you have any suggestions or ideas, contact me on Discord: IAmVisco#7099',\n  },\n  jp: {\n    english,\n    japanese,\n    SparkCalc: '蒼光の御印の計算',\n    ExpRpCalc: 'RPとEXPの計算',\n    crystals: '宝晶石:',\n    singleTickets: 'チケット:',\n    grandTickets: '10連チケット:',\n    totalRolls: '合計:',\n    percentage: '%:',\n    levelFrom: 'から:',\n    levelTo: 'まで:',\n    toNextLevel: '次のLvまで:',\n    bonusExp: ' ボーナスEXP (%):',\n    bonusExpInfo: '普通に大事なものと属性強化スキルから',\n    weaponSummon: '武器/召喚石',\n    character: 'キャラ',\n    rank: 'Rank',\n    sameType: '同じ武器の種類',\n    totalExperience: 'EXPの合計:',\n    rpPercentage: 'RPの合計%:',\n    archangelItems: 'アークエンジェル:',\n    vessels: '杯:',\n    error: 'エラー',\n    cantDowngrade: '武器/召喚石/キャラを下がらない',\n    suggestionsWelcomed: '何か考えと助言があれば私にDiscord：IAmVisco＃7099で連絡してください',\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { Alert, Col, OverlayTrigger, Row, Tooltip } from 'react-bootstrap';\nimport infoIcon from '../assets/info-filled.svg';\nimport { ExperienceTables, ExperienceTypes } from '../helpers/constants';\nimport strings from '../helpers/localization';\nimport '../styles/ExperienceCalculator.scss';\n\nconst ExperienceCalculator: React.FC = () => {\n  const [levelFrom, setLevelFrom] = useState(1);\n  const [levelTo, setLevelTo] = useState(40);\n  const [toNextLevel, setToNextLevel] = useState(0);\n  const [bonusExp, setBonusExp] = useState(10);\n\n  const [expType, setExpType] = useState(ExperienceTypes.Weapon);\n  const [sameType, setSameType] = useState(false);\n\n  const [totalExperienceValue, setTotalExperienceValue] = useState(0);\n  const [archangelItemsValue, setArchangelItemsValue] = useState('0');\n  const [vesselsValue, setVesselsValue] = useState(0);\n\n  const [showError, setShowError] = useState(false);\n  const [maxLevel, setMaxLevel] = useState(ExperienceTables[ExperienceTypes.Weapon].length - 1);\n  const [experienceTable, setExperienceTable] = useState(ExperienceTables[ExperienceTypes.Weapon]);\n\n  useEffect(() => {\n    setMaxLevel(ExperienceTables[expType].length - 1);\n    setExperienceTable(ExperienceTables[expType]);\n    setLevelFrom(levelFrom > maxLevel ? maxLevel : levelFrom);\n    setLevelTo(levelTo > maxLevel ? maxLevel : levelTo);\n\n    const archangelExp = sameType ? 750 : 500;\n    const vesselExp = 30000;\n    let currentExperience = 0;\n\n    const getRequiredItemsCount = (totalExperience: number, itemExperience: number): number =>\n      Math.ceil(totalExperience / (itemExperience + Math.floor(itemExperience * (bonusExp / 100))));\n\n    if (levelFrom > levelTo) {\n      setShowError(true);\n      return;\n    }\n    setShowError(false);\n    if (toNextLevel > 0) {\n      currentExperience = experienceTable[levelFrom + 1] - experienceTable[levelFrom] - toNextLevel;\n    }\n    const totalExperience = experienceTable[levelTo] - experienceTable[levelFrom] - currentExperience;\n    if (expType !== ExperienceTypes.Rank) {\n      const vessels = getRequiredItemsCount(totalExperience, vesselExp);\n      setArchangelItemsValue(getRequiredItemsCount(totalExperience, archangelExp).toString());\n      setVesselsValue(vessels);\n    } else {\n      setArchangelItemsValue(\n        ((experienceTable[levelFrom] / experienceTable[experienceTable.length - 1]) * 100).toFixed(2)\n      );\n    }\n    setTotalExperienceValue(totalExperience);\n  }, [levelFrom, levelTo, toNextLevel, bonusExp, expType, sameType, experienceTable, maxLevel]);\n\n  const handleExperienceTypeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setExpType(e.target.value);\n  };\n\n  return (\n    <>\n      <Row>\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"levelFrom\">\n            {strings.levelFrom}\n          </label>\n          <input\n            min=\"0\"\n            max={maxLevel}\n            type=\"number\"\n            className=\"input-sm form-control\"\n            id=\"levelFrom\"\n            name=\"levelFrom\"\n            value={levelFrom}\n            onChange={(e) => setLevelFrom(parseInt(e.target.value, 10))}\n          />\n        </Col>\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"levelTo\">\n            {strings.levelTo}\n          </label>\n          <input\n            min=\"0\"\n            max={maxLevel}\n            type=\"number\"\n            className=\"input-sm form-control\"\n            id=\"levelTo\"\n            name=\"levelTo\"\n            value={levelTo}\n            onChange={(e) => setLevelTo(parseInt(e.target.value, 10))}\n          />\n        </Col>\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"toNextLevel\">\n            {strings.toNextLevel}\n          </label>\n          <input\n            min=\"0\"\n            step=\"100\"\n            type=\"number\"\n            className=\"input-sm form-control\"\n            id=\"toNextLevel\"\n            name=\"toNextLevel\"\n            value={toNextLevel}\n            onChange={(e) => setToNextLevel(parseInt(e.target.value, 10))}\n          />\n        </Col>\n        <Col xs=\"4\" md=\"3\" lg=\"2\" className=\"will-hide tooltip-col\" hidden={expType === ExperienceTypes.Rank}>\n          <OverlayTrigger overlay={<Tooltip id=\"bonus-info-tooltip\">{strings.bonusExpInfo}</Tooltip>}>\n            <label className=\"no-wrap\" htmlFor=\"bonusExp\">\n              <img src={infoIcon} alt=\"info icon\" width=\"16\" /> {strings.bonusExp}\n            </label>\n          </OverlayTrigger>\n          <input\n            min=\"0\"\n            type=\"number\"\n            className=\"input-sm form-control\"\n            id=\"bonusExp\"\n            name=\"bonusExp\"\n            value={bonusExp}\n            onChange={(e) => setBonusExp(parseInt(e.target.value, 10))}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <div className=\"radio-tile-group\">\n          <div className=\"input-container\">\n            <input\n              id=\"weaponExperience\"\n              type=\"radio\"\n              name=\"expType\"\n              className=\"radio-button\"\n              value={ExperienceTypes.Weapon}\n              checked={expType === ExperienceTypes.Weapon}\n              onChange={handleExperienceTypeChange}\n            />\n            <div className=\"radio-tile\">\n              <label htmlFor=\"weaponExperience\" className=\"radio-tile-label\">\n                {strings.weaponSummon}\n              </label>\n            </div>\n          </div>\n          <div className=\"input-container\">\n            <input\n              id=\"characterExperience\"\n              type=\"radio\"\n              name=\"expType\"\n              className=\"radio-button\"\n              value={ExperienceTypes.Character}\n              checked={expType === ExperienceTypes.Character}\n              onChange={handleExperienceTypeChange}\n            />\n            <div className=\"radio-tile\">\n              <label htmlFor=\"characterExperience\" className=\"radio-tile-label\">\n                {strings.character}\n              </label>\n            </div>\n          </div>\n          <div className=\"input-container\">\n            <input\n              id=\"rankExperience\"\n              type=\"radio\"\n              name=\"expType\"\n              className=\"radio-button\"\n              value={ExperienceTypes.Rank}\n              checked={expType === ExperienceTypes.Rank}\n              onChange={handleExperienceTypeChange}\n            />\n            <div className=\"radio-tile\">\n              <label htmlFor=\"rankExperience\" className=\"radio-tile-label\">\n                {strings.rank}\n              </label>\n            </div>\n          </div>\n        </div>\n        <Col md=\"2\" className=\"align-items-center checkbox-col will-hide\" hidden={expType === ExperienceTypes.Rank}>\n          <label htmlFor=\"sameType\" className=\"m-0 pr-2 no-wrap\">\n            {strings.sameType}\n          </label>\n          <input\n            type=\"checkbox\"\n            id=\"sameType\"\n            name=\"sameType\"\n            className=\"checkbox-input\"\n            checked={sameType}\n            onChange={(e) => setSameType(e.target.checked)}\n          />\n          {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n          <label htmlFor=\"sameType\" className=\"checkbox-label mb-0\">\n            <span className=\"checkbox\" />\n          </label>\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"totalExperience\">\n            {strings.totalExperience}\n          </label>\n          <input\n            disabled\n            type=\"number\"\n            id=\"totalExperience\"\n            name=\"totalExperience\"\n            className=\"input-sm form-control\"\n            value={totalExperienceValue}\n          />\n        </Col>\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"archangelItems\">\n            {expType !== ExperienceTypes.Rank ? strings.archangelItems : strings.rpPercentage}\n          </label>\n          <input\n            disabled\n            type=\"text\"\n            id=\"archangelItems\"\n            name=\"archangelItems\"\n            className=\"input-sm form-control\"\n            value={archangelItemsValue}\n          />\n        </Col>\n        <Col xs=\"4\" md=\"3\" lg=\"2\" className=\"will-hide\" hidden={expType === ExperienceTypes.Rank}>\n          <label className=\"no-wrap\" htmlFor=\"vessels\">\n            {strings.vessels}\n          </label>\n          <input\n            disabled\n            type=\"number\"\n            id=\"vessels\"\n            name=\"vessels\"\n            value={vesselsValue}\n            className=\"input-sm form-control\"\n          />\n        </Col>\n      </Row>\n      <Alert variant=\"danger\" className=\"mb-0 mt-3\" show={showError}>\n        <strong className=\"align-middle\">{strings.error}: </strong>\n        <span className=\"align-middle\">{strings.cantDowngrade}</span>\n      </Alert>\n    </>\n  );\n};\n\nexport default ExperienceCalculator;\n","export const SET_SPARK_DATA = 'SET_SPARK_DATA';\nexport const SET_LANGUAGE = 'SET_LANGUAGE';\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport ReactGA from 'react-ga';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { English, Japanese } from '../helpers/constants';\nimport strings from '../helpers/localization';\nimport { SET_LANGUAGE } from '../store/actions';\nimport { RootState } from '../store/types';\nimport '../styles/Settings.scss';\n\n/* eslint-disable jsx-a11y/label-has-associated-control */\nconst Settings: React.FC = () => {\n  const dispatch = useDispatch();\n  const languageCode = useSelector((state: RootState) => state.languageCode);\n\n  const handleCheckboxChange = () => {\n    const newLanguage = languageCode === English ? Japanese : English;\n\n    dispatch({ type: SET_LANGUAGE, payload: newLanguage });\n    ReactGA.event({\n      category: 'Settings change',\n      action: 'Language change',\n      label: newLanguage,\n    });\n  };\n\n  return (\n    <>\n      <label className=\"language-label\">\n        {strings.english}\n        &nbsp;\n      </label>\n      <label className=\"switch\">\n        <input\n          type=\"checkbox\"\n          id=\"languageSwitch\"\n          onChange={handleCheckboxChange}\n          checked={languageCode === Japanese}\n        />\n        <span className=\"slider\" />\n      </label>\n      <label className=\"language-label\">\n        &nbsp;\n        {strings.japanese}\n      </label>\n      <Alert variant=\"info\" className=\"mb-0 mt-3\">\n        {strings.suggestionsWelcomed}\n      </Alert>\n    </>\n  );\n};\n\nexport default Settings;\n","import React, { useEffect, useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport strings from '../helpers/localization';\nimport { SET_SPARK_DATA } from '../store/actions';\nimport { RootState } from '../store/types';\n\n/* eslint-disable no-bitwise */\nconst SparkCalculator = () => {\n  const dispatch = useDispatch();\n  const { crystals, singleTickets, grandTickets } = useSelector((state: RootState) => ({\n    crystals: state.crystals,\n    singleTickets: state.singleTickets,\n    grandTickets: state.grandTickets,\n  }));\n  const [totalRollsValue, setTotalRollsValue] = useState('0');\n  const [percentageValue, setPercentageValue] = useState('');\n\n  useEffect(() => {\n    const totalRolls = ~~(\n      (parseInt(crystals, 10) / 300)\n      + parseInt(singleTickets, 10)\n      + (parseInt(grandTickets, 10) * 10)\n    );\n    setTotalRollsValue(totalRolls.toString());\n    setPercentageValue(`${~~((totalRolls / 300) * 100)}%`);\n  }, [crystals, singleTickets, grandTickets]);\n\n  const handleFieldClick = (e: React.MouseEvent<HTMLInputElement>) => {\n    e.currentTarget.select();\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: SET_SPARK_DATA,\n      payload: { [e.target.name]: e.target.value },\n    });\n  };\n\n  return (\n    <>\n      <Row>\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"crystals\">{strings.crystals}</label>\n          <input\n            min=\"0\"\n            step=\"100\"\n            max=\"999999\"\n            type=\"number\"\n            className=\"input-sm form-control disable-ff-shadow\"\n            id=\"crystals\"\n            name=\"crystals\"\n            value={crystals}\n            onClick={handleFieldClick}\n            onChange={handleChange}\n          />\n        </Col>\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"singleTickets\">{strings.singleTickets}</label>\n          <input\n            min=\"0\"\n            max=\"9999\"\n            type=\"number\"\n            className=\"input-sm form-control\"\n            id=\"singleTickets\"\n            name=\"singleTickets\"\n            value={singleTickets}\n            onClick={handleFieldClick}\n            onChange={handleChange}\n          />\n        </Col>\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"grandTickets\">{strings.grandTickets}</label>\n          <input\n            min=\"0\"\n            max=\"999\"\n            type=\"number\"\n            className=\"input-sm form-control\"\n            id=\"grandTickets\"\n            name=\"grandTickets\"\n            value={grandTickets}\n            onClick={handleFieldClick}\n            onChange={handleChange}\n          />\n        </Col>\n      </Row>\n      <Row className=\"pt-2\">\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"totalRolls\">{strings.totalRolls}</label>\n          <input\n            disabled\n            type=\"text\"\n            className=\"input-sm form-control\"\n            id=\"totalRolls\"\n            name=\"totalRolls\"\n            value={totalRollsValue}\n          />\n        </Col>\n        <Col xs=\"4\" md=\"3\" lg=\"2\">\n          <label className=\"no-wrap\" htmlFor=\"percentage\">{strings.percentage}</label>\n          <input\n            disabled\n            type=\"text\"\n            className=\"input-sm form-control\"\n            id=\"percentage\"\n            name=\"percentage\"\n            value={percentageValue}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default SparkCalculator;\n","import React from 'react';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport GithubCorner from 'react-github-corner';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ExperienceCalculator from './components/ExperienceCalculator';\nimport Settings from './components/Settings';\nimport SparkCalculator from './components/SparkCalculator';\nimport { Japanese } from './helpers/constants';\nimport strings from './helpers/localization';\nimport { SET_LANGUAGE } from './store/actions';\nimport { RootState } from './store/types';\nimport './styles/App.scss';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const languageCode = useSelector((state: RootState) => state.languageCode);\n\n  if (languageCode === Japanese) {\n    dispatch({ type: SET_LANGUAGE, payload: Japanese });\n  }\n\n  return (\n    <div className=\"container mt-md-3\">\n      <Tabs id=\"menu-tabs\" defaultActiveKey=\"spark\">\n        <Tab eventKey=\"spark\" title={strings.SparkCalc}>\n          <SparkCalculator />\n        </Tab>\n        <Tab eventKey=\"exp\" title={strings.ExpRpCalc}>\n          <ExperienceCalculator />\n        </Tab>\n        <Tab eventKey=\"settings\" title=\"Settings/設定\">\n          <Settings />\n        </Tab>\n      </Tabs>\n      <GithubCorner\n        href=\"https://github.com/eurea/eurea.github.io\"\n        bannerColor=\"#0288D1\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import queryString from 'query-string';\nimport { RootState } from '../store/types';\n\nexport const isBookmarklet = (params: string): boolean => params.includes('crystals') || params.includes('singleTickets') || params.includes('grandTickets');\n\n// TODO: query string parses arrays, and I have no idea how to pass type check here\nexport const parseQueryParams = (params: string): any => {\n  const { crystals, singleTickets, grandTickets } = queryString.parse(params);\n  const newState = {\n    languageCode: localStorage.getItem('lang') || 'en',\n    crystals: crystals || '0',\n    singleTickets: singleTickets || '0',\n    grandTickets: grandTickets || '0',\n  };\n\n  localStorage.clear();\n\n  return newState;\n};\n\nexport const getDefaultState = (): RootState => {\n  const newState = {\n    languageCode: localStorage.getItem('lang') || 'en',\n    crystals: localStorage.getItem('crystals') || '0',\n    singleTickets: localStorage.getItem('singles') || '0',\n    grandTickets: localStorage.getItem('tens') || '0',\n  };\n\n  localStorage.clear();\n\n  return newState;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n//\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n//\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n/* eslint-disable */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL || '', window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/scss/bootstrap.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './App';\nimport { isBookmarklet, parseQueryParams } from './helpers';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './store/reducers';\nimport { RootState } from './store/types';\n\nlet preloadedState;\nconst params = window.location.search;\n\nif (isBookmarklet(params)) {\n  preloadedState = parseQueryParams(params) as RootState;\n} else if ('reduxState' in localStorage) {\n  preloadedState = JSON.parse(localStorage.getItem('reduxState') || '') as RootState;\n}\n\nconst store = createStore(rootReducer, preloadedState);\n\nlocalStorage.setItem('reduxState', JSON.stringify(store.getState()));\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()));\n});\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\nReactDOM.render(app, document.getElementById('root'));\nReactGA.initialize('UA-101216558-2');\nReactGA.pageview(window.location.pathname);\nserviceWorker.register();\n","import { getDefaultState } from '../helpers';\nimport strings from '../helpers/localization';\nimport { SET_LANGUAGE, SET_SPARK_DATA } from './actions';\nimport { ActionTypes, RootState } from './types';\n\nexport default (state: RootState = getDefaultState(), action: ActionTypes) => {\n  switch (action.type) {\n    case SET_SPARK_DATA: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    case SET_LANGUAGE: {\n      strings.setLanguage(action.payload);\n      return {\n        ...state,\n        languageCode: action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n"],"sourceRoot":""}